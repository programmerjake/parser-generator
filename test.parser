%{
#include <iostream>
#include <string>
#include <cctype>
#include <cmath>
#include <cassert>
#include <map>
#include <stdexcept>

using namespace std;

enum TokenType
{
    TTEof,
    TTId,
    TTNumber,
    TTString,
    TTCharacter,
    TTPlus,
    TTMinus,
    TTStar,
    TTFSlash,
    TTLParen,
    TTRParen,
    TTSemicolon,
    TTAssign,
    TTLEq,
    TTLNE,
    TTLLT,
    TTLLE,
    TTLGT,
    TTLGE,
    TTPeriod,
    TTEMark,
};

struct ValueType
{
    TokenType type;
    string svalue;
    double nvalue;
    ValueType()
    {
        type = TTEof;
        svalue = "";
        nvalue = 0;
    }
    explicit ValueType(int) // for EOF
    {
        type = TTEof;
        svalue = "";
        nvalue = 0;
    }
    explicit ValueType(TokenType type, string svalue = "", double nvalue = 0)
        : type(type), svalue(svalue), nvalue(nvalue)
    {
    }
    bool operator ==(const ValueType &rt) const
    {
        return type == rt.type;
    }
    bool operator !=(const ValueType &rt) const
    {
        return type != rt.type;
    }
    friend ostream &operator <<(ostream &os, const ValueType &v)
    {
        if(v.type == TTNumber)
            os << v.nvalue;
        else
            os << v.svalue;
        return os;
    }
    double getNumber() const
    {
        if(type == TTCharacter)
            return (int)svalue[0];
        if(type == TTNumber)
            return nvalue;
        throw runtime_error("can't use string as number");
    }
    string getString() const
    {
        if(type == TTString)
            return svalue;
        if(type == TTCharacter)
            return svalue;
        throw runtime_error("can't use number as string");
    }
    static map<string, ValueType> &getSymbolTable();
};

%}

%token TTEof TTId TTNumber TTString TTCharacter
%token TTPlus TTMinus TTStar TTFSlash TTLParen TTRParen
%token TTSemicolon TTAssign TTLEq TTLNE
%token TTLLT TTLLE TTLGT TTLGE TTEMark

%option "UseC++11"

%%

start: expression TTSemicolon {cout << "output: " << $1 << endl;}
    | start expression TTSemicolon {cout << "output: " << $2 << endl;}
    ;

expression: add_sub_expression {$$ = $1;}
    | TTId TTAssign expression {ValueType::getSymbolTable()[$1.svalue] = $3; $$ = $3;}
    ;

add_sub_expression: mul_div_expression {$$ = $1;}
    | add_sub_expression TTPlus mul_div_expression {if($1.type == TTString || $3.type == TTString) $$ = ValueType(TTString, $1.getString() + $3.getString()); else $$ = ValueType(TTNumber, "", $1.getNumber() + $3.getNumber());}
    | add_sub_expression TTMinus mul_div_expression {$$ = ValueType(TTNumber, "", $1.getNumber() + $3.getNumber());}
    ;

mul_div_expression: factor {$$ = $1;}
    | mul_div_expression TTStar factor {$$ = ValueType(TTNumber, "", $1.getNumber() * $3.getNumber());}
    | mul_div_expression TTFSlash factor {if($3.getNumber() == 0) handleError("division by zero"); $$ = ValueType(TTNumber, "", $1.getNumber() / $3.getNumber());}
    ;

factor: TTNumber {$$ = $1;}
    | TTCharacter {$$ = $1;}
    | TTString {$$ = $1;}
    | TTLParen expression TTRParen {$$ = $2;}
    | TTId {if(ValueType::getSymbolTable().count($1.svalue) == 0) handleError("empty variable"); $$ = ValueType::getSymbolTable()[$1.svalue];}
    ;

%%
%{
map<string, ValueType> &ValueType::getSymbolTable()
{
    static map<string, ValueType> *pSymbolTable = NULL;
    if(!pSymbolTable)
        pSymbolTable = new map<string, ValueType>();
    return *pSymbolTable;
}


class ParserImp : public MyParser
{
    istream &is;
    int readEscapeSequence()
    {
        assert(is.peek() == '\\');
        is.get();
        switch(is.peek())
        {
        case EOF:
        case '\n':
            handleError("missing rest of escape sequence");
            return EOF;
        case '\'':
        case '\\':
        case '\"':
            return is.get();
        case 'a':
            is.get();
            return '\a';
        case 'b':
            is.get();
            return '\b';
        case 'f':
            is.get();
            return '\f';
        case 'n':
            is.get();
            return '\n';
        case 'r':
            is.get();
            return '\r';
        case 't':
            is.get();
            return '\t';
        case 'v':
            is.get();
            return '\v';
        case '0':
            is.get();
            return '\0';
        case 'x':
        {
            int value = 0;
            is.get();
            for(size_t i = 0; i < 2; i++)
            {
                if(!isxdigit(is.peek()))
                    handleError("missing hexadecimal error in escape sequence");
                value *= 0x10;
                if(isdigit(is.peek()))
                    value += is.get() - '0';
                else if(islower(is.peek()))
                    value += is.get() - 'a' + 0xA;
                else
                    value += is.get() - 'A' + 0xA;
            }
            return value;
        }
        default:
            handleError("invalid escape sequence");
            return EOF;
        }
    }
public:
    ParserImp(istream &is)
        : is(is)
    {
    }
protected:
    virtual ValueType getToken()
    {
        while(isspace(is.peek()))
            is.get();
        if(is.peek() == EOF)
            return ValueType(EOF);
        if(isalpha(is.peek()) || is.peek() == '_')
        {
            ValueType retval(TTId);
            while(isalnum(is.peek()) || is.peek() == '_')
                retval.svalue += is.get();
            return retval;
        }
        if(isdigit(is.peek()) || is.peek() == '.')
        {
            ValueType retval(TTNumber, "", 0);
            if(is.peek() == 0)
            {
                retval.svalue += is.get();
                if(is.peek() == 'x' || is.peek() == 'X')
                {
                    retval.svalue += is.get();
                    if(!isxdigit(is.peek()))
                        handleError("missing hexadecimal digit");
                    while(isxdigit(is.peek()))
                    {
                        retval.nvalue *= 0x10;
                        if(isdigit(is.peek()))
                            retval.nvalue += is.peek() - '0';
                        else if(islower(is.peek()))
                            retval.nvalue += 0xA + is.peek() - 'a';
                        else
                            retval.nvalue += 0xA + is.peek() - 'A';
                        retval.svalue += is.get();
                    }
                    return retval;
                }
            }
            while(isdigit(is.peek()))
            {
                retval.nvalue *= 10;
                retval.nvalue += is.peek() - '0';
                retval.svalue += is.get();
            }
            if(is.peek() == '.')
            {
                retval.svalue += is.get();
                if(!isdigit(is.peek()) && retval.svalue == ".")
                {
                    retval.type = TTPeriod;
                    return retval;
                }
                double divisor = 1;
                while(isdigit(is.peek()))
                {
                    divisor *= 10;
                    retval.svalue += is.peek();
                    retval.nvalue += (is.get() - '0') / divisor;
                }
            }
            if(is.peek() == 'e' || is.peek() == 'E')
            {
                retval.svalue += is.get();
                bool isExponentNegative = false;
                int exponent = 0;
                if(is.peek() == '+' || is.peek() == '-')
                {
                    isExponentNegative = (is.peek() == '-');
                    retval.svalue += is.get();
                }
                if(!isdigit(is.peek()))
                    handleError("missing digit");
                while(isdigit(is.peek()))
                {
                    exponent *= 10;
                    exponent += is.peek() - '0';
                    retval.svalue += is.get();
                }
                if(isExponentNegative)
                    exponent = -exponent;
                retval.nvalue *= std::pow(10, exponent);
            }
            return retval;
        }
        if(is.peek() == '\'')
        {
            ValueType retval = ValueType(TTCharacter);
            is.get();
            if(is.peek() == '\\')
                retval.svalue += (char)readEscapeSequence();
            else if(is.peek() == EOF || is.peek() == '\n' || is.peek() == '\r' || is.peek() == '\'')
                handleError("invalid character literal");
            else
                retval.svalue += is.get();
            if(is.peek() != '\'')
                handleError("missing closing \'");
            is.get();
            return retval;
        }
        if(is.peek() == '\"')
        {
            ValueType retval = ValueType(TTString);
            while(is.peek() == '\"') // concatenate strings
            {
                is.get();
                while(is.peek() != '\"' && is.peek() != EOF && is.peek() != '\r' && is.peek() != '\n')
                {
                    if(is.peek() == '\\')
                        retval.svalue += (char)readEscapeSequence();
                    else
                        retval.svalue += is.get();
                }
                if(is.peek() != '\"')
                    handleError("missing closing \"");
                is.get();
                while(isspace(is.peek()))
                    is.get();
            }
            return retval;
        }
        switch(is.peek())
        {
        case '+':
            is.get();
            return ValueType(TTPlus);
        case '-':
            is.get();
            return ValueType(TTMinus);
        case '*':
            is.get();
            return ValueType(TTStar);
        case '/':
            is.get();
            return ValueType(TTFSlash);
        case '(':
            is.get();
            return ValueType(TTLParen);
        case ')':
            is.get();
            return ValueType(TTRParen);
        case ';':
            is.get();
            return ValueType(TTSemicolon);
        case '=':
            is.get();
            if(is.peek() == '=')
            {
                is.get();
                return ValueType(TTLEq);
            }
            return ValueType(TTAssign);
        case '!':
            is.get();
            if(is.peek() == '=')
            {
                is.get();
                return ValueType(TTLNE);
            }
            return ValueType(TTEMark);
        case '<':
            is.get();
            if(is.peek() == '=')
            {
                is.get();
                return ValueType(TTLLE);
            }
            return ValueType(TTLLT);
        case '>':
            is.get();
            if(is.peek() == '=')
            {
                is.get();
                return ValueType(TTLGE);
            }
            return ValueType(TTLGT);
        default:
            handleError("invalid character");
            return ValueType(EOF);
        }
    }
};

int main()
{
    ParserImp parser(cin);
    try
    {
        parser.parse();
    }
    catch(exception &e)
    {
        cerr << "Error : " << e.what() << endl;
        return 1;
    }
    return 0;
}

%}